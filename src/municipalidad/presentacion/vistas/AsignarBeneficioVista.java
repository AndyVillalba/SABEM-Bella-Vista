/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package municipalidad.presentacion.vistas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import municipalidad.dominio.Beneficiario;
import municipalidad.dominio.TipoBeneficio;
import municipalidad.presentacion.interfaces.IAsignarBeneficioVista;
import municipalidad.presentacion.presentadores.AsignarBeneficioPresentador;

/**
 *
 * @author ramir
 */
public class AsignarBeneficioVista extends javax.swing.JDialog implements IAsignarBeneficioVista, ActionListener {

    private final AsignarBeneficioPresentador presentador;
    private final PanelAsignarBeneficio panel = new PanelAsignarBeneficio();
    private Beneficiario beneficiario;

    /**
     * Creates new form AsignarBeneficioVista
     */
    public AsignarBeneficioVista(JDialog parent, boolean modal, int dni) {
        super(parent, modal);
        initComponents();
        presentador = new AsignarBeneficioPresentador(this);
        presentador.cargarDatos(dni);
        this.add(panel);
        panel.getBtnCancelar().addActionListener(this);
        panel.getBtnConfirmar().addActionListener(this);
        panel.getBtnLimpiar().addActionListener(this);
        panel.getBtnBuscar().addActionListener(this);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public AsignarBeneficioVista(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        presentador = new AsignarBeneficioPresentador(this);
        this.add(panel);
        panel.getBtnCancelar().addActionListener(this);
        panel.getBtnConfirmar().addActionListener(this);
        panel.getBtnLimpiar().addActionListener(this);
        panel.getBtnBuscar().addActionListener(this);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setTipoBeneficios(TipoBeneficio[] beneficios) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(beneficios);
        panel.getCbxTipoBeneficio().setModel(model);
    }

    @Override
    public void setEstablecimientos(ArrayList<String> establecimientos) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(establecimientos.toArray());
        panel.getCbxEstablecimiento().setModel(model);
    }

    @Override
    public void setCarreras(ArrayList<String> carreras) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(carreras.toArray());
        panel.getCbxCarrera().setModel(model);
    }

    @Override
    public void setDatosBeneficiario(String ApellidoYNombre, ImageIcon foto) {
        panel.getTxtNombre().setText(ApellidoYNombre);
        panel.getLabelImagen().setIcon(foto);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == panel.getBtnBuscar()) {

            if (this.presentador.iniciarAsignacion(Integer.parseInt(panel.getTxtDni().getText())) == null) {
                JOptionPane.showMessageDialog(this, "No existe un beneficiario con el dni ingresado. Ingrese otro dni", "Error", JOptionPane.ERROR_MESSAGE);
                panel.limpiar();
            }
        }
        if (ae.getSource() == panel.getBtnCancelar()) {
            dispose();
        }
        if (ae.getSource() == panel.getBtnConfirmar()) {
            if (panel.verificarCondiciones()) {
                this.setDatosAcademicos();
                this.confirmarEntregaDocumentos();
                if (this.presentador.confirmar()) {
                    JOptionPane.showMessageDialog(null, "Beneficio dado de alta.");
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "No hay cupo disponible.");
                }
            }
        }
        if (ae.getSource() == panel.getBtnLimpiar()) {
            panel.limpiar();
        }
    }

    public void setDatosAcademicos() {
        this.presentador.asignarBeneficio(panel.getCbxEstablecimiento().getSelectedItem().toString(), panel.getCbxCarrera().getSelectedItem().toString(), (TipoBeneficio) panel.getCbxTipoBeneficio().getSelectedItem());
    }

    public void confirmarEntregaDocumentos() {
        if (panel.getChxFotocopia().isSelected()) {
            this.presentador.confirmarDocumentoEntregado("Fotocopia de DNI");
        }
        if (panel.getChxConstancia().isSelected()) {
            this.presentador.confirmarDocumentoEntregado("Constancia de estudios en curso");
        }
        if (panel.getChxCertificadoResidencia().isSelected()) {
            this.presentador.confirmarDocumentoEntregado("Certificado de residencia");
        }
        if (panel.getChxBoletaServicio().isSelected()) {
            this.presentador.confirmarDocumentoEntregado("Boleta de servicio");
        }
        if (panel.getChxNegativaAnses().isSelected()) {
            this.presentador.confirmarDocumentoEntregado("Negativa de anses");
        }
    }

    @Override
    public void cargarDatos(Beneficiario b) {
        this.beneficiario = b;
        panel.getTxtNombre().setText(b.getNombre() + " " + b.getApellido());
        panel.getLabelImagen().setIcon(b.getFotografia());
        panel.getTxtDni().setEditable(false);
        panel.getBtnBuscar().setEnabled(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
